<?php

/**
 * @file
 * Preprocesses' related to Opening Hours.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\dpl_opening_hours\Model\OpeningHoursRepository;
use Drupal\dpl_react_apps\Controller\DplReactAppsController;
use Drupal\drupal_typed\DrupalTyped;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_preprocess_paragraph__TYPE().
 *
 * Prepares variables for the Opening Hours app in the Opening Hours paragraph.
 *
 * @param array &$variables
 *   Variables for the paragraph template, including the 'paragraph' entity.
 */
function dpl_opening_hours_preprocess_paragraph__opening_hours(&$variables): void {
  $paragraph = $variables['paragraph'] ?? NULL;
  if (!$paragraph instanceof ParagraphInterface) {
    return;
  }

  $parentNode = $paragraph->getParentEntity();
  if ($parentNode && $parentNode->bundle() === 'branch') {
    $branchId = $parentNode->id();

    // Prepare variables for the React app.
    $variables['react_app_opening_hours'] = [
      '#theme' => 'dpl_react_app',
      '#name' => 'opening-hours',
      '#data' => [
        'branch-id' => $branchId,
        'opening-hours-heading-text' => t('Opening Hours', [], ['context' => 'Opening Hours']),
        'show-opening-hours-for-week-text' => t('Show opening hours for week', [], ['context' => 'Opening Hours']),
        'week-text' => t('Week', [], ['context' => 'Opening Hours']),
        'library-is-closed-text' => t('The library is closed this day', [],
          [
            'context' =>
            'Opening Hours',
          ]),
      ] + DplReactAppsController::externalApiBaseUrls(),
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the taxonomy term deletion form related to opening hours.
 *
 * This hook modifies the deletion confirmation form for taxonomy terms within
 * the "opening_hours_categories" vocabulary, adding custom messages.
 *
 * @param array $form
 *   The form structure array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The ID of the form being altered.
 */
function dpl_opening_hours_form_taxonomy_term_opening_hours_categories_delete_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof EntityFormInterface) {
    return;
  }

  $term = $form_object->getEntity();
  if (!$term instanceof TermInterface) {
    return;
  }

  $term_id = $term->id();
  if (!is_int($term_id) && !is_string($term_id)) {
    return;
  }

  $term_label = $term->label();

  $form['#title'] = t('Are you sure you want to delete all "@term_label" opening hours?', [
    '@term_label' => $term_label,
  ], ['context' => 'Opening Hours']);

  $opening_hours_repository = DrupalTyped::service(OpeningHoursRepository::class, 'dpl_opening_hours.repository');
  $opening_hours_in_category = $opening_hours_repository->loadMultiple(categoryId: (int) $term_id);

  $form['description']['#markup'] = t('@term_label is associated with @count opening hours. Deleting @term_label will also delete these opening hours. Are you sure you want to continue?', [
    '@term_label' => $term_label,
    '@count' => count($opening_hours_in_category),
  ], ['context' => 'Opening Hours']);
}

/**
 * Implements hook_taxonomy_term_predelete().
 *
 * Deletes associated opening hours when a category term is deleted.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term being deleted.
 */
function dpl_opening_hours_taxonomy_term_predelete(TermInterface $term): void {
  if ($term->bundle() !== 'opening_hours_categories') {
    return;
  }

  $term_id = $term->id();
  if (!is_int($term_id) && !is_string($term_id)) {
    return;
  }

  $opening_hours_repository = DrupalTyped::service(OpeningHoursRepository::class, 'dpl_opening_hours.repository');
  $opening_hours_in_category = $opening_hours_repository->loadMultiple(categoryId: (int) $term_id);

  foreach ($opening_hours_in_category as $instance) {
    if ($instance->id) {
      $opening_hours_repository->delete($instance->id, $instance->repetition->id);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 *
 * Adds two instances of the Opening Hours sidebar React app to the page.
 * Since there are two triggers to open the sidebar, two instances of the app
 * are required. The app will adjust its markup based on the `size` property.
 *
 * @param mixed[] $variables
 *   Theme variables.
 */
function dpl_opening_hours_preprocess_page(array &$variables): void {
  $branchNodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'branch']);
  $branchesArray = dpl_opening_hours_build_branches_array($branchNodes);

  $openingHoursSidebarData = [
    'opening-hours-sidebar-branches-config' => $branchesArray,
    'opening-hours-text' => t('Opening hours', [], ['context' => 'Opening Hours sidebar']),
    'opening-hours-sidebar-title-text' => t("Today's opening hours", [], ['context' => 'Opening Hours sidebar']),
    'opening-hours-sidebar-link-text' => t('Go to @branchName', [], ['context' => 'Opening Hours sidebar']),
  ] + DplReactAppsController::externalApiBaseUrls();

  $variables['opening_hours_sidebar_large'] = [
    '#theme' => 'dpl_react_app',
    '#name' => 'opening-hours-sidebar',
    '#data' => $openingHoursSidebarData + ['size' => 'large'],
  ];
  $variables['opening_hours_sidebar_small'] = [
    '#theme' => 'dpl_react_app',
    '#name' => 'opening-hours-sidebar',
    '#data' => $openingHoursSidebarData + ['size' => 'small'],
  ];
}

/**
 * Builds an array of branch details.
 *
 * @param \Drupal\node\NodeInterface[] $branches
 *   An array of branch nodes.
 *
 * @return array<array{'branch_id': int|string|null, 'name': string|null,
 *   'link': string, 'promoted': bool}>
 *   An array of branch details.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 *   Thrown when the entity is malformed.
 */
function dpl_opening_hours_build_branches_array(array $branches): array {
  $branchesArray = [];
  foreach ($branches as $branch) {
    if (!($branch instanceof NodeInterface)) {
      continue;
    }

    $branchesArray[] = [
      'branch_id' => $branch->id(),
      'name' => $branch->getTitle(),
      'link' => $branch->toUrl()->toString(),
      'promoted' => (bool) $branch->get('field_promoted_on_lists')->value,
    ];
  }
  return $branchesArray;
}
